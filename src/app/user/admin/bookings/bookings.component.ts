import { Observable, Subscription } from 'rxjs/Rx';

import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';

import {
  BookingsService,
  SessionService,
  NotificationService,
  LangService,
} from '../../../shared/services';
import { Booking } from '../../../models';
import { BookingState } from '../../../models/booking-state.enum';
import { ConfirmPopupComponent } from './../../../shared/confirm-popup/confirm-popup.component';

@Component({
  selector: 'nb-bookings',
  templateUrl: './bookings.component.html',
  styleUrls: ['./bookings.component.css']
})
export class BookingsComponent implements OnInit, AfterViewInit {

  isBusy: boolean;

  bookings: Booking[];

  booking: Booking;

  confirmDialogTitle: string;

  confirmDialogMsg: string;

  private table: any;

  private bookingsListSubscription: Subscription;

  @ViewChild(ConfirmPopupComponent)
  private confirmPopupComponent: ConfirmPopupComponent;

  constructor(
    private bookingService: BookingsService,
    private notificationService: NotificationService,
    private lang: LangService
  ) {
    this.isBusy = false;
    this.bookings = [];
  }

  alignTable() {
    const table = jQuery('#bookings-datatable');

    if (!table) {
      const msg = this.lang.get('err_no_datatable');
      return this.notificationService.notifyError(msg);
    }

    const settings: Object = {
      pagingType: 'full_numbers',
      order: [[2, 'asc']],
      columnDefs: [
        { targets: [6], searchable: false, sortable: false }
      ]
    };

    setTimeout(() => {
      this.table = table.DataTable(<DataTables.Settings>settings);

      // fetch more vehicles on page length change event
      table.on('length.dt', () => this.fetchMore());

      // fetch more vehicles on page change event
      table.on('page.dt', () => this.fetchMore());
    });
  }

  getBookings() {
    this.isBusy = true;
    this.bookingsListSubscription = this.bookingService.collection
      .subscribe(
        data => {
          this.isBusy = false;
          this.bookings = data;

          if (!this.table && this.bookings.length > 0) {
            this.alignTable();
          } else if (this.table) {
            // make DataTable register new vehicles
            // by making it to "rerender" the rows generated by Angular2
            setTimeout(() => {
              const tbody = this.table.table().body();
              this.table
                .clear()
                .rows.add(jQuery(tbody).children('tr'))
                .draw()
              ;
            });

            this.notificationService.notifyInfo(this.lang.get('msg_list_extended'));
          }
        },
        err => {
          this.isBusy = false;
          this.notificationService.notifyError(this.lang.get('err_failed_fetching_list'));
        }
      )
    ;
    this.bookingService.fetch();
  }

  ngOnInit() {
    this.getBookings();
  }

  ngAfterViewInit() {
   /* this.confirmDialogTitle = this.lang.get('ttl_b_confirm_cancel');
    this.confirmDialogMsg = this.lang.get('msg_b_confirm_cancel');*/
  }

  cancelBooking(booking: Booking) {
    this.booking = booking;
    this.confirmDialogTitle = this.lang.get('ttl_b_confirm_cancel');
    this.confirmDialogMsg = this.lang.get('msg_b_confirm_cancel');
    this.confirmPopupComponent.show(this.confirmDialogTitle,this.confirmDialogMsg );
  }

  onDeletionConfirmed() {
    this.isBusy = true;
    this.bookingService.cancel(this.booking).subscribe(
      data => {
        this.isBusy = false;
        this.booking.state = <BookingState>BookingState.Cancelled;
      },
      err => {
        this.isBusy = false;
        this.notificationService.notifyError(this.lang.get('err_failed_cancelling_booking'));
      }
    );
  }

  isBookingCancelable(booking: Booking): boolean {
    return booking.state === BookingState.Active;
  }

  private fetchMore() {
    if (this.bookingService.hasMore()) {
      this.bookingService.fetch();
    }
  }

}
