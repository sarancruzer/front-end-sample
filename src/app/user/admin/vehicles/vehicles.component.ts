import { Observable, Subscription } from 'rxjs/Rx';

import { Component, OnInit, ViewChild, OnDestroy, AfterViewInit } from '@angular/core';

import {
  Vehicle,
  User,
  VehicleType
} from './../../../models';
import {
  SessionService,
  VehiclesService,
  UploadService,
  NotificationService,
  LangService,
} from './../../../shared/services';
import { VehicleEditorComponent } from './vehicle-editor/vehicle-editor.component';
import { ConfirmPopupComponent } from './../../../shared/confirm-popup/confirm-popup.component';

@Component({
  selector: 'nb-vehicles',
  templateUrl: './vehicles.component.html',
  styleUrls: ['./vehicles.component.css']
})
export class VehiclesComponent implements OnInit, OnDestroy, AfterViewInit {

  isBusy = false;

  vehicles: Vehicle[];

  vehicle: Vehicle;

  editorToggler: boolean;

  uploadToggler: boolean;

  deleteDialogTitle: string;

  deleteConfirmationMsg: string;

  uploadActionText: string;

  private table: any;

  private vehiclesListSubscription: Subscription;

  @ViewChild(VehicleEditorComponent)
  private vehicleEditorComponent: VehicleEditorComponent;

  @ViewChild(ConfirmPopupComponent)
  private confirmPopupComponent: ConfirmPopupComponent;

  constructor(
    private vehiclesService: VehiclesService,
    private uploadService: UploadService,
    private notificationService: NotificationService,
    private lang: LangService
  ) {
    this.vehicles = [];
    this.editorToggler = false;
  }

  buildTable() {
    const table: any = $('#vehicles-datatable');
    if (!table) {
      const err = this.lang.get('err_failed_finding_datatable_v');
      return this.notificationService.notifyError(err);
    }

    const settings: Object = {
      pagingType: 'full_numbers',
      retrieve: true,
      order: [[1, 'asc']],
      columnDefs: [
        { targets: [0, 7], sortable: false, searchable: false }
      ]
    };

    setTimeout(() => {
      this.table = table.DataTable(<DataTables.Settings>settings);

      // fetch more vehicles on page length change event
      table.on('length.dt', () => this.fetchMore());

      // fetch more vehicles on page change event
      table.on('page.dt', () => this.fetchMore());
    });
  }

  getVehicles() {
    this.isBusy = true;
    this.vehiclesListSubscription = this.vehiclesService.collection
      .subscribe(
        data => {
          this.isBusy = false;
          this.vehicles = data;

          if (!this.table && this.vehicles.length > 0) {
            this.buildTable();
          } else if (this.table) {
            // make DataTable register new vehicles
            // by making it to "rerender" the rows generated by Angular2
            setTimeout(() => {
              const tbody = this.table.table().body();
              this.table
                .clear()
                .rows.add(jQuery(tbody).children('tr'))
                .draw()
              ;
            });

            this.notificationService.notifyInfo(this.lang.get('msg_vehicles_list_expanded'));
          }
        },
        err => {
          this.isBusy = false;
          this.notificationService.notifyError(this.lang.get('err_failed_fetching_vehicles'));
        }
      )
    ;
    this.vehiclesService.fetch();
  }

  ngOnInit() {
    this.getVehicles();
  }

  ngOnDestroy() {
    if (this.vehiclesListSubscription) {
      this.vehiclesListSubscription.unsubscribe();
    }
  }

  ngAfterViewInit() {
    this.deleteDialogTitle = this.lang.get('ttl_v_delete_confirm');
    this.deleteConfirmationMsg = this.lang.get('msg_v_delete_confirm');
    this.uploadActionText = this.lang.get('vehicles_csv');
  }

  onEditorShown() {
    this.editorToggler = true;
  }

  onEditorHidden() {
    this.editorToggler = false;
  }

  onUploadPopupShown() {
    this.uploadToggler = true;
  }

  onUploadPopupHidden() {
    this.uploadToggler = false;
  }

  onUpdate(vehicle: any) {
    let isUpdated: boolean;
    for (let i = 0; i < this.vehicles.length; i++) {
      if (this.vehicles[i].key === vehicle.key) {
        this.vehicles[i] = vehicle;
        isUpdated = true;
        break;
      }
    }

    if (!isUpdated) {
      this.vehicles.push(vehicle);
      this.getVehicles();
    }
  }

  addVehicle() {
    this.editorToggler = true;
    this.vehicleEditorComponent.setBTAsCreate();
    this.vehicle = null;
  }

  editVehicle(vehicle: Vehicle) {
    this.editorToggler = true;
    this.vehicle = vehicle;
    this.vehicleEditorComponent.setBTAsUpdate();
  }

  deleteVehicle(vehicle: Vehicle) {
    this.vehicle = vehicle;
    this.confirmPopupComponent.show();
  }

  onFileUpload(event: File) {
    this.isBusy = true;
    const fileObj = event;
    this.uploadService.uploadVehicles(fileObj).subscribe(
      data => {
        this.isBusy = false;
        const msg = this.lang.get('msg_csv_file_uploaded_v');
        this.notificationService.notifySuccess(msg, true);
        this.getVehicles();
      },
      err => {
        this.isBusy = false;
        this.notificationService.notifyError(this.lang.get('err_failed_uploading_csv_file_v'));
      }
    );
  }

  onDeletionConfirmed() {
    this.vehiclesService.delete(this.vehicle).subscribe(
      data => {
        const index: number = this.vehicles.indexOf(this.vehicle);
        if (index > -1) {
          this.vehicles.splice(index, 1);
        }
      },
      err => {
        this.notificationService.notifyError(this.lang.get('err_failed_deleting_vehicle'));
      }
    );
  }

  private fetchMore() {
    if (this.vehiclesService.hasMore()) {
      this.vehiclesService.fetch();
    }
  }

}
